/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISWTRProxy {
  export type IssuerStruct = {
    name: string;
    version: BigNumberish;
    issuerAddress: AddressLike;
  };

  export type IssuerStructOutput = [
    name: string,
    version: bigint,
    issuerAddress: string
  ] & { name: string; version: bigint; issuerAddress: string };

  export type VerificationDataStruct = {
    verificationType: BigNumberish;
    verificationId: BytesLike;
    issuerAddress: AddressLike;
    originChain: string;
    issuanceTimestamp: BigNumberish;
    expirationTimestamp: BigNumberish;
    originalData: BytesLike;
    schema: string;
    issuerVerificationId: string;
    version: BigNumberish;
  };

  export type VerificationDataStructOutput = [
    verificationType: bigint,
    verificationId: string,
    issuerAddress: string,
    originChain: string,
    issuanceTimestamp: bigint,
    expirationTimestamp: bigint,
    originalData: string,
    schema: string,
    issuerVerificationId: string,
    version: bigint
  ] & {
    verificationType: bigint;
    verificationId: string;
    issuerAddress: string;
    originChain: string;
    issuanceTimestamp: bigint;
    expirationTimestamp: bigint;
    originalData: string;
    schema: string;
    issuerVerificationId: string;
    version: bigint;
  };
}

export interface ISWTRProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodeQuadrataPassportV1OriginalData"
      | "decodeWorldcoinV1OriginalData"
      | "getIssuerAddressesByNameAndVersions"
      | "getIssuerRecordByAddress"
      | "getVerificationCountry"
      | "getVerificationDataById"
      | "isUserVerified"
      | "isUserVerifiedBy"
      | "issuerRecordCount"
      | "listIssuersRecord"
      | "listVerificationData"
      | "passedVerificationType"
      | "walletPassedAML"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeQuadrataPassportV1OriginalData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeWorldcoinV1OriginalData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerAddressesByNameAndVersions",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerRecordByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationCountry",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationDataById",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerified",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserVerifiedBy",
    values: [AddressLike, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerRecordCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listIssuersRecord",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listVerificationData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "passedVerificationType",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletPassedAML",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeQuadrataPassportV1OriginalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeWorldcoinV1OriginalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerAddressesByNameAndVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerRecordByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationDataById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserVerifiedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuerRecordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listIssuersRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listVerificationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "passedVerificationType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletPassedAML",
    data: BytesLike
  ): Result;
}

export interface ISWTRProxy extends BaseContract {
  connect(runner?: ContractRunner | null): ISWTRProxy;
  waitForDeployment(): Promise<this>;

  interface: ISWTRProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeQuadrataPassportV1OriginalData: TypedContractMethod<
    [originalData: BytesLike],
    [
      [bigint, string, string, boolean, boolean] & {
        aml: bigint;
        country: string;
        did: string;
        isBusiness: boolean;
        investorStatus: boolean;
      }
    ],
    "view"
  >;

  decodeWorldcoinV1OriginalData: TypedContractMethod<
    [originalData: BytesLike],
    [
      [string, string, string, string] & {
        merkle_root: string;
        nullifier_hash: string;
        proof: string;
        verification_level: string;
      }
    ],
    "view"
  >;

  getIssuerAddressesByNameAndVersions: TypedContractMethod<
    [name: string, version: BigNumberish[]],
    [string[]],
    "view"
  >;

  getIssuerRecordByAddress: TypedContractMethod<
    [issuerAddress: AddressLike],
    [ISWTRProxy.IssuerStructOutput],
    "view"
  >;

  getVerificationCountry: TypedContractMethod<
    [
      userAddress: AddressLike,
      issuerAddress: AddressLike,
      verificationType: BigNumberish
    ],
    [string],
    "view"
  >;

  getVerificationDataById: TypedContractMethod<
    [
      userAddress: AddressLike,
      issuerAddress: AddressLike,
      verificationId: BytesLike
    ],
    [ISWTRProxy.VerificationDataStructOutput],
    "view"
  >;

  isUserVerified: TypedContractMethod<
    [userAddress: AddressLike, verificationType: BigNumberish],
    [boolean],
    "view"
  >;

  isUserVerifiedBy: TypedContractMethod<
    [
      userAddress: AddressLike,
      verificationType: BigNumberish,
      allowedIssuers: AddressLike[]
    ],
    [boolean],
    "view"
  >;

  issuerRecordCount: TypedContractMethod<[], [bigint], "view">;

  listIssuersRecord: TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [ISWTRProxy.IssuerStructOutput[]],
    "view"
  >;

  listVerificationData: TypedContractMethod<
    [userAddress: AddressLike, issuerAddress: AddressLike],
    [ISWTRProxy.VerificationDataStructOutput[]],
    "view"
  >;

  passedVerificationType: TypedContractMethod<
    [
      userAddress: AddressLike,
      issuerAddress: AddressLike,
      verificationType: BigNumberish
    ],
    [boolean],
    "view"
  >;

  walletPassedAML: TypedContractMethod<
    [userAddress: AddressLike, issuerAddress: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeQuadrataPassportV1OriginalData"
  ): TypedContractMethod<
    [originalData: BytesLike],
    [
      [bigint, string, string, boolean, boolean] & {
        aml: bigint;
        country: string;
        did: string;
        isBusiness: boolean;
        investorStatus: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeWorldcoinV1OriginalData"
  ): TypedContractMethod<
    [originalData: BytesLike],
    [
      [string, string, string, string] & {
        merkle_root: string;
        nullifier_hash: string;
        proof: string;
        verification_level: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIssuerAddressesByNameAndVersions"
  ): TypedContractMethod<
    [name: string, version: BigNumberish[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIssuerRecordByAddress"
  ): TypedContractMethod<
    [issuerAddress: AddressLike],
    [ISWTRProxy.IssuerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVerificationCountry"
  ): TypedContractMethod<
    [
      userAddress: AddressLike,
      issuerAddress: AddressLike,
      verificationType: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVerificationDataById"
  ): TypedContractMethod<
    [
      userAddress: AddressLike,
      issuerAddress: AddressLike,
      verificationId: BytesLike
    ],
    [ISWTRProxy.VerificationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserVerified"
  ): TypedContractMethod<
    [userAddress: AddressLike, verificationType: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUserVerifiedBy"
  ): TypedContractMethod<
    [
      userAddress: AddressLike,
      verificationType: BigNumberish,
      allowedIssuers: AddressLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issuerRecordCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listIssuersRecord"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [ISWTRProxy.IssuerStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "listVerificationData"
  ): TypedContractMethod<
    [userAddress: AddressLike, issuerAddress: AddressLike],
    [ISWTRProxy.VerificationDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "passedVerificationType"
  ): TypedContractMethod<
    [
      userAddress: AddressLike,
      issuerAddress: AddressLike,
      verificationType: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "walletPassedAML"
  ): TypedContractMethod<
    [userAddress: AddressLike, issuerAddress: AddressLike],
    [boolean],
    "view"
  >;

  filters: {};
}
